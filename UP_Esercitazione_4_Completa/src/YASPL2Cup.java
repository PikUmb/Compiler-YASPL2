
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import SyntaxTree.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class YASPL2Cup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return YASPL2Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public YASPL2Cup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public YASPL2Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public YASPL2Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\033\004" +
    "\000\002\033\004\000\002\033\002\000\002\004\004\000" +
    "\002\025\004\000\002\025\002\000\002\005\005\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\004\000\002\026\005\000\002\026\002\000\002\017\004" +
    "\000\002\027\005\000\002\027\002\000\002\006\012\000" +
    "\002\012\004\000\002\012\002\000\002\031\004\000\002" +
    "\031\002\000\002\013\004\000\002\032\004\000\002\032" +
    "\002\000\002\014\007\000\002\015\005\000\002\007\003" +
    "\000\002\007\003\000\002\016\006\000\002\016\005\000" +
    "\002\016\006\000\002\016\011\000\002\016\013\000\002" +
    "\016\011\000\002\016\011\000\002\020\004\000\002\020" +
    "\004\000\002\030\005\000\002\030\005\000\002\030\002" +
    "\000\002\022\004\000\002\024\005\000\002\024\002\000" +
    "\002\023\003\000\002\023\003\000\002\023\005\000\002" +
    "\023\003\000\002\023\005\000\002\023\004\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\005\000" +
    "\002\021\004\000\002\021\005\000\002\021\005\000\002" +
    "\035\003\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\004\005\001\002\000\004\002\221\001" +
    "\002\000\014\005\ufffd\011\015\012\013\013\007\014\011" +
    "\001\002\000\004\005\217\001\002\000\010\006\ufff3\007" +
    "\ufff3\050\ufff3\001\002\000\014\005\ufffa\011\015\012\013" +
    "\013\007\014\011\001\002\000\004\050\032\001\002\000" +
    "\004\050\024\001\002\000\010\006\ufff4\007\ufff4\050\ufff4" +
    "\001\002\000\014\005\ufffa\011\015\012\013\013\007\014" +
    "\011\001\002\000\010\006\ufff5\007\ufff5\050\ufff5\001\002" +
    "\000\014\005\ufffa\011\015\012\013\013\007\014\011\001" +
    "\002\000\014\005\ufffa\011\015\012\013\013\007\014\011" +
    "\001\002\000\004\005\uffff\001\002\000\004\005\ufffc\001" +
    "\002\000\004\005\ufffb\001\002\000\004\006\031\001\002" +
    "\000\010\006\ufff0\007\025\026\ufff0\001\002\000\004\050" +
    "\027\001\002\000\010\006\ufff2\026\ufff2\046\ufff2\001\002" +
    "\000\012\006\ufff0\007\025\026\ufff0\046\ufff0\001\002\000" +
    "\010\006\ufff1\026\ufff1\046\ufff1\001\002\000\040\005\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\020\ufff6\025" +
    "\ufff6\026\ufff6\030\ufff6\033\ufff6\050\ufff6\051\ufff6\052\ufff6" +
    "\053\ufff6\001\002\000\004\025\033\001\002\000\012\011" +
    "\015\012\013\013\007\026\uffea\001\002\000\004\026\041" +
    "\001\002\000\034\011\015\012\013\013\007\015\uffe8\020" +
    "\uffe8\025\uffe8\026\uffe8\030\uffe8\033\uffe8\050\uffe8\051\uffe8" +
    "\052\uffe8\053\uffe8\001\002\000\026\015\uffeb\020\uffeb\025" +
    "\uffeb\026\uffeb\030\uffeb\033\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\001\002\000\034\011\015\012\013\013\007\015" +
    "\uffe8\020\uffe8\025\uffe8\026\uffe8\030\uffe8\033\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\001\002\000\026\015\uffe9\020" +
    "\uffe9\025\uffe9\026\uffe9\030\uffe9\033\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\001\002\000\004\027\042\001\002\000" +
    "\010\011\015\012\013\013\007\001\002\000\004\030\051" +
    "\001\002\000\012\011\015\012\013\013\007\030\uffe5\001" +
    "\002\000\012\011\015\012\013\013\007\030\uffe5\001\002" +
    "\000\004\030\uffe7\001\002\000\004\030\uffe6\001\002\000" +
    "\014\005\uffec\011\uffec\012\uffec\013\uffec\014\uffec\001\002" +
    "\000\032\011\015\012\013\013\007\015\uffea\020\uffea\025" +
    "\uffea\030\uffea\033\uffea\050\uffea\051\uffea\052\uffea\053\uffea" +
    "\001\002\000\024\015\064\020\055\025\061\030\056\033" +
    "\054\050\072\051\057\052\053\053\060\001\002\000\042" +
    "\006\uffd0\007\uffd0\026\uffd0\027\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\047\uffd0\001\002\000\014\025\061\033" +
    "\054\050\075\051\057\052\053\001\002\000\004\025\207" +
    "\001\002\000\024\015\064\020\055\025\061\030\056\033" +
    "\054\050\072\051\057\052\053\053\060\001\002\000\042" +
    "\006\uffd1\007\uffd1\026\uffd1\027\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\047\uffd1\001\002\000\006\007\122\047" +
    "\uffd5\001\002\000\014\025\061\033\054\050\075\051\057" +
    "\052\053\001\002\000\030\002\ufff7\015\064\020\055\025" +
    "\061\030\056\031\ufff7\033\054\050\072\051\057\052\053" +
    "\053\060\001\002\000\004\031\176\001\002\000\004\025" +
    "\140\001\002\000\030\002\uffe2\015\uffe2\020\uffe2\025\uffe2" +
    "\030\uffe2\031\uffe2\033\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\001\002\000\004\046\130\001\002\000\016\007\122" +
    "\032\077\033\101\034\103\035\102\047\uffd5\001\002\000" +
    "\030\002\uffe1\015\uffe1\020\uffe1\025\uffe1\030\uffe1\031\uffe1" +
    "\033\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\001\002\000" +
    "\004\047\120\001\002\000\024\007\025\010\074\025\073" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\046\ufff0\047\uffce\001" +
    "\002\000\014\025\061\033\054\050\075\051\057\052\053" +
    "\001\002\000\014\025\061\033\054\050\075\051\057\052" +
    "\053\001\002\000\042\006\uffce\007\uffce\026\uffce\027\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\047\uffce\001\002" +
    "\000\014\006\100\032\077\033\101\034\103\035\102\001" +
    "\002\000\014\025\uffcb\033\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\001\002\000\030\002\uffde\015\uffde\020\uffde\025\uffde\030" +
    "\uffde\031\uffde\033\uffde\050\uffde\051\uffde\052\uffde\053\uffde" +
    "\001\002\000\014\025\uffca\033\uffca\050\uffca\051\uffca\052" +
    "\uffca\001\002\000\014\025\uffc8\033\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\001\002\000\014\025\uffc9\033\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\001\002\000\014\025\061\033\054\050\075" +
    "\051\057\052\053\001\002\000\042\006\uffcf\007\uffcf\026" +
    "\uffcf\027\uffcf\032\077\033\101\034\103\035\102\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\047" +
    "\uffcf\001\002\000\016\007\114\027\uffd2\032\077\033\101" +
    "\034\103\035\102\001\002\000\004\027\110\001\002\000" +
    "\004\050\024\001\002\000\004\026\112\001\002\000\004" +
    "\006\113\001\002\000\030\002\uffdd\015\uffdd\020\uffdd\025" +
    "\uffdd\030\uffdd\031\uffdd\033\uffdd\050\uffdd\051\uffdd\052\uffdd" +
    "\053\uffdd\001\002\000\014\025\061\033\054\050\075\051" +
    "\057\052\053\001\002\000\004\027\uffd4\001\002\000\016" +
    "\007\114\027\uffd2\032\077\033\101\034\103\035\102\001" +
    "\002\000\004\027\uffd3\001\002\000\004\006\121\001\002" +
    "\000\030\002\uffdf\015\uffdf\020\uffdf\025\uffdf\030\uffdf\031" +
    "\uffdf\033\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\001\002" +
    "\000\016\025\061\033\054\050\075\051\057\052\053\053" +
    "\124\001\002\000\004\047\uffd9\001\002\000\006\007\122" +
    "\047\uffd5\001\002\000\016\007\122\032\077\033\101\034" +
    "\103\035\102\047\uffd5\001\002\000\004\047\uffd7\001\002" +
    "\000\004\047\uffd6\001\002\000\010\011\015\012\013\013" +
    "\007\001\002\000\004\006\137\001\002\000\006\006\uffed" +
    "\007\133\001\002\000\010\011\015\012\013\013\007\001" +
    "\002\000\004\006\uffef\001\002\000\006\006\uffed\007\133" +
    "\001\002\000\004\006\uffee\001\002\000\030\002\uffe0\015" +
    "\uffe0\020\uffe0\025\uffe0\030\uffe0\031\uffe0\033\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\001\002\000\022\022\146\023" +
    "\142\024\144\025\143\033\054\050\075\051\057\052\053" +
    "\001\002\000\010\026\167\043\150\044\151\001\002\000" +
    "\010\026\uffc7\043\uffc7\044\uffc7\001\002\000\022\022\146" +
    "\023\142\024\144\025\143\033\054\050\075\051\057\052" +
    "\053\001\002\000\010\026\uffc6\043\uffc6\044\uffc6\001\002" +
    "\000\024\032\077\033\101\034\103\035\102\036\160\037" +
    "\155\040\161\041\157\042\156\001\002\000\022\022\146" +
    "\023\142\024\144\025\143\033\054\050\075\051\057\052" +
    "\053\001\002\000\010\026\uffc4\043\uffc4\044\uffc4\001\002" +
    "\000\022\022\uffc1\023\uffc1\024\uffc1\025\uffc1\033\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\001\002\000\022\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\033\uffc0\050\uffc0\051\uffc0\052\uffc0\001" +
    "\002\000\022\022\146\023\142\024\144\025\143\033\054" +
    "\050\075\051\057\052\053\001\002\000\010\026\uffc5\043" +
    "\150\044\151\001\002\000\014\025\061\033\054\050\075" +
    "\051\057\052\053\001\002\000\014\025\uffbe\033\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\001\002\000\014\025\uffbb\033\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\001\002\000\014\025\uffbc\033" +
    "\uffbc\050\uffbc\051\uffbc\052\uffbc\001\002\000\014\025\uffbf" +
    "\033\uffbf\050\uffbf\051\uffbf\052\uffbf\001\002\000\014\025" +
    "\uffbd\033\uffbd\050\uffbd\051\uffbd\052\uffbd\001\002\000\020" +
    "\026\uffc3\032\077\033\101\034\103\035\102\043\uffc3\044" +
    "\uffc3\001\002\000\010\026\166\043\150\044\151\001\002" +
    "\000\026\026\165\032\077\033\101\034\103\035\102\036" +
    "\160\037\155\040\161\041\157\042\156\001\002\000\042" +
    "\006\uffcd\007\uffcd\026\uffcd\027\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\047\uffcd\001\002\000\010\026\uffc2\043" +
    "\uffc2\044\uffc2\001\002\000\004\016\170\001\002\000\004" +
    "\030\056\001\002\000\006\006\173\017\172\001\002\000" +
    "\004\030\056\001\002\000\030\002\uffdb\015\uffdb\020\uffdb" +
    "\025\uffdb\030\uffdb\031\uffdb\033\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\001\002\000\004\006\175\001\002\000\030" +
    "\002\uffdc\015\uffdc\020\uffdc\025\uffdc\030\uffdc\031\uffdc\033" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\001\002\000\004" +
    "\006\177\001\002\000\014\005\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\001\002\000\006\002\ufff9\031\ufff9\001\002" +
    "\000\030\002\ufff7\015\064\020\055\025\061\030\056\031" +
    "\ufff7\033\054\050\072\051\057\052\053\053\060\001\002" +
    "\000\006\002\ufff8\031\ufff8\001\002\000\014\026\165\032" +
    "\077\033\101\034\103\035\102\001\002\000\004\047\uffd8" +
    "\001\002\000\004\031\206\001\002\000\034\002\uffe3\006" +
    "\uffe3\015\uffe3\017\uffe3\020\uffe3\025\uffe3\030\uffe3\031\uffe3" +
    "\033\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\001\002\000" +
    "\022\022\146\023\142\024\144\025\143\033\054\050\075" +
    "\051\057\052\053\001\002\000\010\026\211\043\150\044" +
    "\151\001\002\000\004\021\212\001\002\000\004\030\056" +
    "\001\002\000\004\006\214\001\002\000\030\002\uffda\015" +
    "\uffda\020\uffda\025\uffda\030\uffda\031\uffda\033\uffda\050\uffda" +
    "\051\uffda\052\uffda\053\uffda\001\002\000\042\006\uffcc\007" +
    "\uffcc\026\uffcc\027\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\047\uffcc\001\002\000\004\005\ufffe\001\002\000\024" +
    "\015\064\020\055\025\061\030\056\033\054\050\072\051" +
    "\057\052\053\053\060\001\002\000\004\002\001\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\005\005\013\006\007\010\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\016\006\015\010" +
    "\011\033\215\001\001\000\002\001\001\000\004\011\022" +
    "\001\001\000\002\001\001\000\012\005\016\006\015\010" +
    "\011\033\017\001\001\000\002\001\001\000\012\005\016" +
    "\006\015\010\011\033\021\001\001\000\012\005\016\006" +
    "\015\010\011\033\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\034\010\011\012\033\001\001" +
    "\000\002\001\001\000\010\005\036\010\011\031\035\001" +
    "\001\000\002\001\001\000\010\005\036\010\011\031\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\043\010\011\013\042\001\001\000\004\014\047\001\001" +
    "\000\010\005\044\010\011\032\045\001\001\000\010\005" +
    "\044\010\011\032\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\034\010\011\012" +
    "\051\001\001\000\020\004\062\007\061\011\065\015\064" +
    "\016\067\020\070\023\066\001\001\000\002\001\001\000" +
    "\004\023\214\001\001\000\002\001\001\000\020\004\204" +
    "\007\061\011\065\015\064\016\067\020\070\023\066\001" +
    "\001\000\002\001\001\000\004\030\203\001\001\000\004" +
    "\023\202\001\001\000\020\007\200\011\065\015\064\016" +
    "\067\020\070\023\066\025\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\122\034\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\025\001\001\000\006\022\106\023" +
    "\105\001\001\000\004\023\075\001\001\000\002\001\001" +
    "\000\004\034\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\104\001\001\000\004\034\103\001\001\000" +
    "\006\024\114\034\103\001\001\000\002\001\001\000\004" +
    "\011\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\115\001\001\000\002\001\001" +
    "\000\006\024\116\034\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\124\001\001" +
    "\000\002\001\001\000\004\030\126\001\001\000\006\030" +
    "\125\034\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\131\017\130\001\001\000\002\001\001\000" +
    "\004\027\133\001\001\000\004\010\134\001\001\000\002" +
    "\001\001\000\004\027\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\140\023\144\001\001\000\004" +
    "\035\151\001\001\000\002\001\001\000\006\021\162\023" +
    "\163\001\001\000\002\001\001\000\006\034\103\036\153" +
    "\001\001\000\006\021\146\023\144\001\001\000\004\035" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\152\023\144\001\001\000\004\035\151\001\001\000" +
    "\004\023\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\103\001\001\000\004\035\151\001\001\000\006" +
    "\034\103\036\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\170\001\001\000\002" +
    "\001\001\000\004\015\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\200\011\065\015" +
    "\064\016\067\020\070\023\066\025\201\001\001\000\002" +
    "\001\001\000\004\034\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\207\023\144" +
    "\001\001\000\004\035\151\001\001\000\002\001\001\000" +
    "\004\015\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\103\001\001\000\002\001\001\000\020\004" +
    "\217\007\061\011\065\015\064\016\067\020\070\023\066" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$YASPL2Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$YASPL2Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$YASPL2Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
	Lexer lexer;
	
	public YASPL2Cup(Lexer lexer){
	    super(lexer);
	    this.lexer = lexer;
    }
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$YASPL2Cup$actions {
  private final YASPL2Cup parser;

  /** Constructor */
  CUP$YASPL2Cup$actions(YASPL2Cup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$YASPL2Cup$do_action_part00000000(
    int                        CUP$YASPL2Cup$act_num,
    java_cup.runtime.lr_parser CUP$YASPL2Cup$parser,
    java.util.Stack            CUP$YASPL2Cup$stack,
    int                        CUP$YASPL2Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$YASPL2Cup$result;

      /* select the action based on the action number */
      switch (CUP$YASPL2Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programma ::= HEAD decls START statements 
            {
              Node RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Node decls = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node sts = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = new OpNode("ProgramOp", decls, sts); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("programma",0, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		RESULT = start_val;
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$YASPL2Cup$parser.done_parsing();
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decls ::= var_decl decls_list 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node dl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("DeclsVarOp", vd);
											if(dl!=null){
												for (Node node : ((OpNode) dl).nodeList()){
													toReturn.addNode(node);
												}
											}
											RESULT = toReturn; 
										
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decls ::= def_decl decls_list 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node dl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("DeclsDefOp", vd);
											if(dl!=null){
												for (Node node : ((OpNode) dl).nodeList()){
													toReturn.addNode(node);
												}
											}  
											RESULT = toReturn;
										
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decls ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decls_list ::= var_decl decls_list 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node dl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("DeclsList", vd);
														if (dl!=null){
													   		for (Node node : ((OpNode) dl).nodeList()){ 
													   			toReturn.addNode(node); 
													   		}
													   	}
												   RESULT = toReturn; 
												 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("decls_list",25, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decls_list ::= def_decl decls_list 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node dl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("DeclsList", vd);
														if (dl!=null){
													   		for (Node node : ((OpNode) dl).nodeList()){ 
													   			toReturn.addNode(node); 
													   		}
													   	}
												   RESULT = toReturn; 
												 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("decls_list",25, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decls_list ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("decls_list",25, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statements ::= stat statements_list 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int statlleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int statlright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node statl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("StatsOp", s);
												if(statl!=null){
													for (Node node : ((OpNode) statl).nodeList()){ 
														toReturn.addNode(node);
													}
												}
												RESULT = toReturn; 
											
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statements_list ::= stat statements_list 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int statlleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int statlright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node statl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("StatsList", s);
														if (statl!=null){
													   		for (Node node : ((OpNode) statl).nodeList()){ 
													   			toReturn.addNode(node); 
													   		}
													   	}
												   RESULT = toReturn; 
												 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("statements_list",19, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statements_list ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("statements_list",19, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_decl ::= type vars SEMI 
            {
              Node RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Node type = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node vars = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		 RESULT = new OpNode("VarDeclOp", type, vars ); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("var_decl",3, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= INT 
            {
              Node RESULT =null;
		 RESULT = new Leaf("integer",null); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= BOOL 
            {
              Node RESULT =null;
		 RESULT = new Leaf("boolean",null); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= DOUBLE 
            {
              Node RESULT =null;
		 RESULT = new Leaf("double",null); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vars ::= NAME vars_list 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int varslleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int varslright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node varsl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("VarOp", new Leaf("ID",SymbolTable.lookup(name).value.toString()) );
										if(varsl!=null){
											for (Node node : ((OpNode) varsl).nodeList()){ 
												toReturn.addNode(node);
											}
										}
										RESULT = toReturn; 
									
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("vars",7, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vars_list ::= COMMA NAME vars_list 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int varslleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int varslright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node varsl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("VarsList", new Leaf("ID",SymbolTable.lookup(name).value.toString()) );
													if (varsl!=null){
													 	for (Node node : ((OpNode) varsl).nodeList()){ 
													   		toReturn.addNode(node); 
													   	}
													 }
												 RESULT = toReturn; 
											
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("vars_list",20, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vars_list ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("vars_list",20, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // types ::= type types_list 
            {
              Node RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node type = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int typeslleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int typeslright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node typesl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("TypesOp", type);
										if(typesl!=null){
											for (Node node : ((OpNode) typesl).nodeList()){ 
												toReturn.addNode(node);
											}
										}
										RESULT = toReturn; 
									
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("types",13, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // types_list ::= COMMA type types_list 
            {
              Node RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node type = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int typeslleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int typeslright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node typesl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("TypesList", type);
													if (typesl!=null){
													 	for (Node node : ((OpNode) typesl).nodeList()){
													   		toReturn.addNode(node);
													   	}
													 }
												 RESULT = toReturn; 
											
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("types_list",21, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // types_list ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("types_list",21, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // def_decl ::= DEF NAME LPAR var_decls RPAR COLON par_decls body 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).value;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).right;
		Node vds = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node pds = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node body = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = new OpNode("ProcDeclOp", new Leaf("ID",SymbolTable.lookup(name).value.toString()), vds, pds, body); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("def_decl",4, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-7)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_decls ::= var_decl var_decls_list 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("VarDeclsOp", vd);
												if(vdl!=null){
													for (Node node : ((OpNode) vdl).nodeList()){ 
														toReturn.addNode(node);
													}
												}
												RESULT = toReturn; 
											
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("var_decls",8, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_decls ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("var_decls",8, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_decls_list ::= var_decl var_decls_list 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node vdl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("VarDeclsList", vd);
														if (vdl!=null){
														 	for (Node node : ((OpNode) vdl).nodeList()){
														   		toReturn.addNode(node);
														   	}
														 }
													 RESULT = toReturn; 
												
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("var_decls_list",23, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var_decls_list ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("var_decls_list",23, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // par_decls ::= var_decl par_decls_list 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int pdlleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int pdlright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node pdl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("ParDeclsOp", vd);
												if(pdl!=null){
													for (Node node : ((OpNode) pdl).nodeList()){ 
														toReturn.addNode(node);
													}
												}
												RESULT = toReturn; 
											
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("par_decls",9, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // par_decls_list ::= var_decl par_decls_list 
            {
              Node RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node vd = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int pdlleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int pdlright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node pdl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("ParDeclsList", vd);
														if (pdl!=null){
														 	for (Node node : ((OpNode) pdl).nodeList()){
														   		toReturn.addNode(node);
														   	}
														 }
													 RESULT = toReturn; 
												
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("par_decls_list",24, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // par_decls_list ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("par_decls_list",24, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // body ::= LGPAR var_decls statements RGPAR SEMI 
            {
              Node RESULT =null;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		Node vds = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Node sts = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		 RESULT = new OpNode("BodyOp", vds, sts); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("body",10, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comp_stat ::= LGPAR statements RGPAR 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		 RESULT = new OpNode("CompStatOp", s); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("comp_stat",11, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stat ::= comp_stat 
            {
              Node RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node cs = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = cs; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("stat",5, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stat ::= simple_stat 
            {
              Node RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node ss = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = ss; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("stat",5, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_stat ::= vars READ types SEMI 
            {
              Node RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		Node vars = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node types = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		 RESULT = new OpNode("ReadOp", vars, types); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("simple_stat",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_stat ::= out_values WRITE SEMI 
            {
              Node RESULT =null;
		int outvleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int outvright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Node outv = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		 RESULT = new OpNode("WriteOp", outv); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("simple_stat",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_stat ::= NAME ASSIGN expr SEMI 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		 RESULT = new OpNode("AssignOp", new Leaf("ID",SymbolTable.lookup(name).value.toString()), expr); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("simple_stat",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple_stat ::= NAME LPAR exprs COLON vars RPAR SEMI 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).right;
		Node exprs = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Node vars = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		 RESULT = new OpNode("CallOp", new Leaf("ID",SymbolTable.lookup(name).value.toString()), exprs, vars); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("simple_stat",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simple_stat ::= IF LPAR bool_expr RPAR THEN comp_stat ELSE comp_stat SEMI 
            {
              Node RESULT =null;
		int bexprleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).left;
		int bexprright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).right;
		Node bexpr = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)).value;
		int cstat1left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).left;
		int cstat1right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).right;
		Node cstat1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)).value;
		int cstat2left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int cstat2right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node cstat2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		 RESULT = new OpNode("IfThenElseOp", bexpr, cstat1, cstat2); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("simple_stat",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-8)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simple_stat ::= IF LPAR bool_expr RPAR THEN comp_stat SEMI 
            {
              Node RESULT =null;
		int bexprleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).left;
		int bexprright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).right;
		Node bexpr = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).value;
		int cstatleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int cstatright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node cstat = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		 RESULT = new OpNode("IfThenOp", bexpr, cstat); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("simple_stat",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_stat ::= WHILE LPAR bool_expr RPAR DO comp_stat SEMI 
            {
              Node RESULT =null;
		int bexprleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).left;
		int bexprright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).right;
		Node bexpr = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)).value;
		int cstatleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int cstatright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node cstat = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		 RESULT = new OpNode("WhileOp", bexpr, cstat); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("simple_stat",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // out_values ::= expr out_values_list 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int ovlleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int ovlright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node ovl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("OutValuesExprOp", e);
													if(ovl!=null){
														for (Node node : ((OpNode) ovl).nodeList()){ 
															toReturn.addNode(node);
														}
													}
													RESULT = toReturn; 
												
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("out_values",14, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // out_values ::= STRING_CONST out_values_list 
            {
              Node RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int ovlleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int ovlright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node ovl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("OutValuesStringOp", new Leaf("STRING_CONST", str) );
															if(ovl!=null){
																for (Node node : ((OpNode) ovl).nodeList()){ 
																	toReturn.addNode(node);
																}
															}
															RESULT = toReturn; 
														
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("out_values",14, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // out_values_list ::= COMMA expr out_values_list 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int ovlleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int ovlright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node ovl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("OutValuesExprList", e);
																	if (ovl!=null){
																	 	for (Node node : ((OpNode) ovl).nodeList()){ 
																	   		toReturn.addNode(node); 
																	   	}
																	 }
																  RESULT = toReturn; 
																
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("out_values_list",22, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // out_values_list ::= COMMA STRING_CONST out_values_list 
            {
              Node RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int ovlleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int ovlright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node ovl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode toReturn = new OpNode("OutValuesStringList", new Leaf("STRING_CONST", str) );
																	if (ovl!=null){
																	 	for (Node node : ((OpNode) ovl).nodeList()){
																	   		toReturn.addNode(node); 
																	   	}
																	 }
																  RESULT = toReturn; 
																
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("out_values_list",22, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // out_values_list ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("out_values_list",22, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exprs ::= expr exprs_list 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int exprslleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int exprslright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node exprsl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode n = new OpNode("ExprsOp", expr);
											if (exprsl!=null){
								   		   		for (Node node : ((OpNode) exprsl).nodeList()){ 
								   		   			n.addNode(node); 
								   		   		}
								   		   	}
								   		   RESULT = n; 
								   		
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("exprs",16, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprs_list ::= COMMA expr exprs_list 
            {
              Node RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node expr = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int exprslleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int exprslright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node exprsl = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 OpNode n = new OpNode("ExprsList", expr);
														if (exprsl!=null){
													   		for (Node node : ((OpNode) exprsl).nodeList()){
													   			n.addNode(node); 
													   		}
													   	}
												   RESULT = n; 
												 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("exprs_list",18, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprs_list ::= 
            {
              Node RESULT =null;
		 RESULT = null; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("exprs_list",18, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= NUMBER_INT 
            {
              Node RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = new Leaf("INT_CONST",ni); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= NUMBER_DOUBLE 
            {
              Node RESULT =null;
		int ndleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int ndright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		String nd = (String)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = new Leaf("DOUBLE_CONST", nd); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr arith_op expr 
            {
              Node RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Node ex1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int aopleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int aopright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		String aop = (String)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node ex2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 switch(aop){
											case "+": RESULT = new OpNode("AddOp", ex1, ex2);
														break; 
											case "-": RESULT = new OpNode("DiffOp", ex1, ex2);
														break;
											case "*": RESULT = new OpNode("MulOp", ex1, ex2);
														break;
											case "/": RESULT = new OpNode("DivOp", ex1, ex2);
														break;
										}
							 			
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= NAME 
            {
              Node RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Integer name = (Integer)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = new Leaf("ID",SymbolTable.lookup(name).value.toString()); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= LPAR expr RPAR 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node e = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		 RESULT = e; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= MINUS expr 
            {
              Node RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node ex = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = new OpNode("UminusOp", ex); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // arith_op ::= PLUS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = "+"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("arith_op",26, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // arith_op ::= MINUS 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = "-"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("arith_op",26, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // arith_op ::= TIMES 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = "*"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("arith_op",26, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arith_op ::= DIV 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = "/"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("arith_op",26, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bool_expr ::= TRUE 
            {
              Node RESULT =null;
		 RESULT = new Leaf("BOOLEAN_CONSTANT","true"); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bool_expr ::= FALSE 
            {
              Node RESULT =null;
		 RESULT = new Leaf("BOOLEAN_CONSTANT","false"); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bool_expr ::= bool_expr bool_op bool_expr 
            {
              Node RESULT =null;
		int be1left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int be1right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Node be1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int bopleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int bopright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		String bop = (String)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int be2left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int be2right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node be2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 if(bop.equals("AND")){
															RESULT = new OpNode("AndOp", be1, be2);
														}else{
															RESULT = new OpNode("OrOp", be1, be2);
														}
													
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bool_expr ::= NOT bool_expr 
            {
              Node RESULT =null;
		int bexleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int bexright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node bex = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = new OpNode("NotOp", bex); 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bool_expr ::= expr rel_op expr 
            {
              Node RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).right;
		Node ex1 = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)).value;
		int ropleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int ropright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		String rop = (String)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Node ex2 = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 switch(rop){
											case "GT": RESULT = new OpNode("GtOp", ex1, ex2);
														break;
											case "GE": RESULT = new OpNode("GeOp", ex1, ex2);
														break;
											case "LT": RESULT = new OpNode("LtOp", ex1, ex2);
														break;
											case "LE": RESULT = new OpNode("LeOp", ex1, ex2);
														break;
											case "EQ": RESULT = new OpNode("EqOp", ex1, ex2);
														break;
										}
							 			
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bool_expr ::= LPAR bool_expr RPAR 
            {
              Node RESULT =null;
		int bexleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int bexright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Node bex = (Node)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		 RESULT = bex; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bool_op ::= AND 
            {
              String RESULT =null;
		 RESULT = "AND"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_op",27, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bool_op ::= OR 
            {
              String RESULT =null;
		 RESULT = "OR"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_op",27, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // rel_op ::= GT 
            {
              String RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.peek()).value;
		 RESULT = "GT"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("rel_op",28, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // rel_op ::= GE 
            {
              String RESULT =null;
		 RESULT = "GE"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("rel_op",28, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // rel_op ::= LT 
            {
              String RESULT =null;
		 RESULT = "LT"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("rel_op",28, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // rel_op ::= LE 
            {
              String RESULT =null;
		 RESULT = "LE"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("rel_op",28, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // rel_op ::= EQ 
            {
              String RESULT =null;
		 RESULT = "EQ"; 
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("rel_op",28, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$YASPL2Cup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$YASPL2Cup$do_action(
    int                        CUP$YASPL2Cup$act_num,
    java_cup.runtime.lr_parser CUP$YASPL2Cup$parser,
    java.util.Stack            CUP$YASPL2Cup$stack,
    int                        CUP$YASPL2Cup$top)
    throws java.lang.Exception
    {
              return CUP$YASPL2Cup$do_action_part00000000(
                               CUP$YASPL2Cup$act_num,
                               CUP$YASPL2Cup$parser,
                               CUP$YASPL2Cup$stack,
                               CUP$YASPL2Cup$top);
    }
}

}
