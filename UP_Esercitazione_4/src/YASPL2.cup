// Specifica CUP per il linguaggio YASPL2

import java_cup.runtime.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

parser code{: 
	Lexer lexer;
	
	public YASPL2Cup(Lexer lexer){
	    super(lexer);
	    this.lexer = lexer;
    }
    :}; 
 
 scan with {: return lexer.next_token(); :};
 
 /* Terminals (tokens returned by the scanner). */
 terminal HEAD, START;
 terminal SEMI, COMMA, ASSIGN, INT, BOOL, DOUBLE;
 terminal DEF, IF, THEN, ELSE, WHILE, DO, NOT;
 terminal TRUE, FALSE;
 terminal LPAR, RPAR, COLON, LGPAR, RGPAR, PLUS, MINUS, TIMES, DIV, GT, GE, LT, LE, EQ, AND, OR;
 terminal UMINUS;
 terminal READ, WRITE;
 terminal Integer NAME;
 terminal String NUMBER_INT, NUMBER_DOUBLE, STRING_CONST;

 /* Non-terminals */
 non terminal programma, decls, statements;
 non terminal var_decl, def_decl;
 non terminal stat, type, vars;
 non terminal var_decls, par_decls, body;
 non terminal comp_stat, simple_stat;
 non terminal types, out_values, bool_expr, exprs, arith_op, bool_op, rel_op;
 non terminal expr; 
 
 /* Precedences */
precedence nonassoc ELSE;
precedence left PLUS, MINUS, OR;
precedence left TIMES, DIV, AND;
/* Due occorrenze consecutive di terminali non associativi generano errore, usato per operazioni di confronto */
precedence nonassoc GT, GE, LT, LE, EQ;
precedence left UMINUS, NOT, COMMA;
 
 /* The grammar */
 
programma ::= HEAD decls START statements ;
 
decls ::= var_decl decls
		|
		def_decl decls 
		|
		/* empty */			
		;
		
statements ::= stat statements 
			|
			stat
			;

var_decl ::= type vars SEMI 
		; 

type ::= INT
		|
		BOOL
		|
		DOUBLE
		;
		
vars ::= NAME COMMA vars
		|
		NAME
		;
		
types ::= type COMMA types
		|
		type
		;
			
def_decl ::= DEF NAME LPAR var_decls RPAR COLON par_decls body ;

var_decls ::= var_decl var_decls
			|
			/* empty */			
			;
			
par_decls ::= var_decl par_decls
			|
			var_decl 
			;
			
body ::= LGPAR var_decls statements RGPAR SEMI ;

comp_stat ::= LGPAR statements RGPAR ;

stat ::= comp_stat 
		|
		simple_stat 
		;
		
simple_stat ::= vars READ types SEMI 
			|
			out_values WRITE SEMI 
			|
			NAME ASSIGN expr SEMI
			|
			NAME LPAR exprs COLON vars RPAR SEMI 
			|
			IF LPAR bool_expr RPAR THEN comp_stat ELSE comp_stat SEMI
			|
			IF LPAR bool_expr RPAR THEN comp_stat SEMI 
			|
			WHILE LPAR bool_expr RPAR DO comp_stat SEMI 
			;
			
out_values ::= expr COMMA out_values
			|
			STRING_CONST COMMA out_values
			|
			expr
			|
			STRING_CONST
			;
		
exprs ::= expr COMMA exprs
		|
		expr
		;
		
expr ::= NUMBER_INT
		|
		NUMBER_DOUBLE
		|
		expr arith_op expr
		|
		NAME
		|
		LPAR expr RPAR
		|
		MINUS expr %prec UMINUS 
		;
		
arith_op ::= PLUS
			|
			MINUS
			|
			TIMES
			|
			DIV
			;
			
bool_expr ::= TRUE
			|
			FALSE
			|
			bool_expr bool_op bool_expr 
			|
			NOT bool_expr 
			|
			expr rel_op expr 
			|
			LPAR bool_expr RPAR
			;
			
bool_op ::= AND
		|
		OR 
		;
		
rel_op ::= GT
		|
		GE 
		|
		LT 
		|
		LE 
		|
		EQ 
		;
 