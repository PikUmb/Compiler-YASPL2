
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class YASPL2Cup extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return YASPL2Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public YASPL2Cup() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public YASPL2Cup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public YASPL2Cup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\003\000\002\005\005\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\005\000\002" +
    "\011\003\000\002\017\005\000\002\017\003\000\002\006" +
    "\012\000\002\012\004\000\002\012\002\000\002\013\004" +
    "\000\002\013\003\000\002\014\007\000\002\015\005\000" +
    "\002\007\003\000\002\007\003\000\002\016\006\000\002" +
    "\016\005\000\002\016\006\000\002\016\011\000\002\016" +
    "\013\000\002\016\011\000\002\016\011\000\002\020\005" +
    "\000\002\020\005\000\002\020\003\000\002\020\003\000" +
    "\002\022\005\000\002\022\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\005\000\002\026\003\000\002\026" +
    "\005\000\002\026\004\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\005\000\002\021\004\000\002" +
    "\021\005\000\002\021\005\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\004\005\001\002\000\004\002\176\001" +
    "\002\000\014\005\ufffd\011\015\012\013\013\007\014\011" +
    "\001\002\000\004\005\174\001\002\000\010\006\ufff7\007" +
    "\ufff7\050\ufff7\001\002\000\014\005\ufffd\011\015\012\013" +
    "\013\007\014\011\001\002\000\004\050\024\001\002\000" +
    "\004\050\017\001\002\000\010\006\ufff8\007\ufff8\050\ufff8" +
    "\001\002\000\014\005\ufffd\011\015\012\013\013\007\014" +
    "\011\001\002\000\010\006\ufff9\007\ufff9\050\ufff9\001\002" +
    "\000\004\005\uffff\001\002\000\012\006\ufff5\007\022\026" +
    "\ufff5\046\ufff5\001\002\000\004\006\021\001\002\000\040" +
    "\005\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\020" +
    "\ufffa\025\ufffa\026\ufffa\030\ufffa\033\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\001\002\000\004\050\017\001\002\000" +
    "\010\006\ufff6\026\ufff6\046\ufff6\001\002\000\004\025\025" +
    "\001\002\000\012\011\015\012\013\013\007\026\ufff0\001" +
    "\002\000\004\026\031\001\002\000\034\011\015\012\013" +
    "\013\007\015\ufff0\020\ufff0\025\ufff0\026\ufff0\030\ufff0\033" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002\000\026" +
    "\015\ufff1\020\ufff1\025\ufff1\026\ufff1\030\ufff1\033\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\001\002\000\004\027\032" +
    "\001\002\000\010\011\015\012\013\013\007\001\002\000" +
    "\004\030\037\001\002\000\012\011\015\012\013\013\007" +
    "\030\uffee\001\002\000\004\030\uffef\001\002\000\014\005" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\001\002\000\032" +
    "\011\015\012\013\013\007\015\ufff0\020\ufff0\025\ufff0\030" +
    "\ufff0\033\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002" +
    "\000\024\015\051\020\044\025\047\030\043\033\041\050" +
    "\060\051\045\052\042\053\046\001\002\000\014\025\047" +
    "\033\041\050\063\051\045\052\042\001\002\000\042\006" +
    "\uffdb\007\uffdb\026\uffdb\027\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\047\uffdb\001\002\000\024\015\051\020\044" +
    "\025\047\030\043\033\041\050\060\051\045\052\042\053" +
    "\046\001\002\000\004\025\162\001\002\000\042\006\uffdc" +
    "\007\uffdc\026\uffdc\027\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\047\uffdc\001\002\000\006\007\160\047\uffdf\001" +
    "\002\000\014\025\047\033\041\050\063\051\045\052\042" +
    "\001\002\000\030\002\ufffb\015\051\020\044\025\047\030" +
    "\043\031\ufffb\033\041\050\060\051\045\052\042\053\046" +
    "\001\002\000\004\025\120\001\002\000\004\031\116\001" +
    "\002\000\030\002\uffeb\015\uffeb\020\uffeb\025\uffeb\030\uffeb" +
    "\031\uffeb\033\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\001" +
    "\002\000\004\046\110\001\002\000\016\007\106\032\065" +
    "\033\066\034\071\035\070\047\uffe0\001\002\000\004\047" +
    "\104\001\002\000\030\002\uffea\015\uffea\020\uffea\025\uffea" +
    "\030\uffea\031\uffea\033\uffea\050\uffea\051\uffea\052\uffea\053" +
    "\uffea\001\002\000\024\007\022\010\062\025\061\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\046\ufff5\047\uffd9\001\002\000" +
    "\014\025\047\033\041\050\063\051\045\052\042\001\002" +
    "\000\014\025\047\033\041\050\063\051\045\052\042\001" +
    "\002\000\042\006\uffd9\007\uffd9\026\uffd9\027\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\047\uffd9\001\002\000\014" +
    "\006\067\032\065\033\066\034\071\035\070\001\002\000" +
    "\014\025\uffd6\033\uffd6\050\uffd6\051\uffd6\052\uffd6\001\002" +
    "\000\014\025\uffd5\033\uffd5\050\uffd5\051\uffd5\052\uffd5\001" +
    "\002\000\030\002\uffe7\015\uffe7\020\uffe7\025\uffe7\030\uffe7" +
    "\031\uffe7\033\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\001" +
    "\002\000\014\025\uffd3\033\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\001\002\000\014\025\uffd4\033\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\001\002\000\014\025\047\033\041\050\063\051\045" +
    "\052\042\001\002\000\042\006\uffda\007\uffda\026\uffda\027" +
    "\uffda\032\065\033\066\034\071\035\070\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\047\uffda\001" +
    "\002\000\016\007\102\027\uffdd\032\065\033\066\034\071" +
    "\035\070\001\002\000\004\027\076\001\002\000\004\050" +
    "\017\001\002\000\004\026\100\001\002\000\004\006\101" +
    "\001\002\000\030\002\uffe6\015\uffe6\020\uffe6\025\uffe6\030" +
    "\uffe6\031\uffe6\033\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\001\002\000\014\025\047\033\041\050\063\051\045\052" +
    "\042\001\002\000\004\027\uffde\001\002\000\004\006\105" +
    "\001\002\000\030\002\uffe8\015\uffe8\020\uffe8\025\uffe8\030" +
    "\uffe8\031\uffe8\033\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\001\002\000\016\025\047\033\041\050\063\051\045\052" +
    "\042\053\046\001\002\000\004\047\uffe2\001\002\000\010" +
    "\011\015\012\013\013\007\001\002\000\004\006\115\001" +
    "\002\000\006\006\ufff3\007\113\001\002\000\010\011\015" +
    "\012\013\013\007\001\002\000\004\006\ufff4\001\002\000" +
    "\030\002\uffe9\015\uffe9\020\uffe9\025\uffe9\030\uffe9\031\uffe9" +
    "\033\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\001\002\000" +
    "\004\006\117\001\002\000\014\005\uffed\011\uffed\012\uffed" +
    "\013\uffed\014\uffed\001\002\000\022\022\126\023\122\024" +
    "\124\025\123\033\041\050\063\051\045\052\042\001\002" +
    "\000\010\026\147\043\130\044\131\001\002\000\010\026" +
    "\uffd2\043\uffd2\044\uffd2\001\002\000\022\022\126\023\122" +
    "\024\124\025\123\033\041\050\063\051\045\052\042\001" +
    "\002\000\010\026\uffd1\043\uffd1\044\uffd1\001\002\000\024" +
    "\032\065\033\066\034\071\035\070\036\140\037\135\040" +
    "\141\041\137\042\136\001\002\000\022\022\126\023\122" +
    "\024\124\025\123\033\041\050\063\051\045\052\042\001" +
    "\002\000\010\026\uffcf\043\uffcf\044\uffcf\001\002\000\022" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\033\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\001\002\000\022\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\033\uffcb\050\uffcb\051\uffcb\052\uffcb\001\002\000" +
    "\022\022\126\023\122\024\124\025\123\033\041\050\063" +
    "\051\045\052\042\001\002\000\010\026\uffd0\043\130\044" +
    "\131\001\002\000\014\025\047\033\041\050\063\051\045" +
    "\052\042\001\002\000\014\025\uffc9\033\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\001\002\000\014\025\uffc6\033\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\001\002\000\014\025\uffc7\033\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\001\002\000\014\025\uffca\033\uffca" +
    "\050\uffca\051\uffca\052\uffca\001\002\000\014\025\uffc8\033" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\001\002\000\020\026\uffce" +
    "\032\065\033\066\034\071\035\070\043\uffce\044\uffce\001" +
    "\002\000\010\026\146\043\130\044\131\001\002\000\026" +
    "\026\145\032\065\033\066\034\071\035\070\036\140\037" +
    "\135\040\141\041\137\042\136\001\002\000\042\006\uffd8" +
    "\007\uffd8\026\uffd8\027\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\047\uffd8\001\002\000\010\026\uffcd\043\uffcd\044" +
    "\uffcd\001\002\000\004\016\150\001\002\000\004\030\043" +
    "\001\002\000\006\006\153\017\152\001\002\000\004\030" +
    "\043\001\002\000\030\002\uffe4\015\uffe4\020\uffe4\025\uffe4" +
    "\030\uffe4\031\uffe4\033\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\001\002\000\004\006\155\001\002\000\030\002\uffe5" +
    "\015\uffe5\020\uffe5\025\uffe5\030\uffe5\031\uffe5\033\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\001\002\000\006\002\ufffc" +
    "\031\ufffc\001\002\000\014\026\145\032\065\033\066\034" +
    "\071\035\070\001\002\000\016\025\047\033\041\050\063" +
    "\051\045\052\042\053\046\001\002\000\004\047\uffe1\001" +
    "\002\000\022\022\126\023\122\024\124\025\123\033\041" +
    "\050\063\051\045\052\042\001\002\000\010\026\164\043" +
    "\130\044\131\001\002\000\004\021\165\001\002\000\004" +
    "\030\043\001\002\000\004\006\167\001\002\000\030\002" +
    "\uffe3\015\uffe3\020\uffe3\025\uffe3\030\uffe3\031\uffe3\033\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\001\002\000\004\031" +
    "\171\001\002\000\034\002\uffec\006\uffec\015\uffec\017\uffec" +
    "\020\uffec\025\uffec\030\uffec\031\uffec\033\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\001\002\000\042\006\uffd7\007\uffd7" +
    "\026\uffd7\027\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\047\uffd7\001\002\000\004\005\ufffe\001\002\000\024\015" +
    "\051\020\044\025\047\030\043\033\041\050\060\051\045" +
    "\052\042\053\046\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\005\005\013\006\007\010\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\172\005\013\006" +
    "\007\010\011\001\001\000\002\001\001\000\004\011\017" +
    "\001\001\000\002\001\001\000\012\003\015\005\013\006" +
    "\007\010\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\026\010\011\012\025\001\001\000\002\001" +
    "\001\000\010\005\026\010\011\012\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\033\010\011\013" +
    "\032\001\001\000\004\014\035\001\001\000\010\005\033" +
    "\010\011\013\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\026\010\011\012\037\001\001\000\020" +
    "\004\051\007\047\011\053\015\052\016\056\020\055\026" +
    "\054\001\001\000\004\026\171\001\001\000\002\001\001" +
    "\000\020\004\167\007\047\011\053\015\052\016\056\020" +
    "\055\026\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\156\001\001\000\020\004" +
    "\155\007\047\011\053\015\052\016\056\020\055\026\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\074\026\073\001\001\000\004\026\063\001\001\000\002" +
    "\001\001\000\004\023\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\072\001\001\000\004\023\071\001" +
    "\001\000\004\023\071\001\001\000\002\001\001\000\004" +
    "\011\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\102\026\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\106\026\054\001\001\000\002\001\001\000\006\010\111" +
    "\017\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\111\017\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\120\026\124\001\001\000\004\024\131\001\001\000\002" +
    "\001\001\000\006\021\142\026\143\001\001\000\002\001" +
    "\001\000\006\023\071\025\133\001\001\000\006\021\126" +
    "\026\124\001\001\000\004\024\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\132\026\124\001\001" +
    "\000\004\024\131\001\001\000\004\026\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\071\001\001\000" +
    "\004\024\131\001\001\000\006\023\071\025\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\150\001\001\000\002\001\001\000\004\015\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\071\001\001\000\006" +
    "\020\160\026\054\001\001\000\002\001\001\000\006\021" +
    "\162\026\124\001\001\000\004\024\131\001\001\000\002" +
    "\001\001\000\004\015\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\071\001\001\000\002\001\001\000\020\004\174\007" +
    "\047\011\053\015\052\016\056\020\055\026\054\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$YASPL2Cup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$YASPL2Cup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$YASPL2Cup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
	Lexer lexer;
	
	public YASPL2Cup(Lexer lexer){
	    super(lexer);
	    this.lexer = lexer;
    }
    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$YASPL2Cup$actions {
  private final YASPL2Cup parser;

  /** Constructor */
  CUP$YASPL2Cup$actions(YASPL2Cup parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$YASPL2Cup$do_action_part00000000(
    int                        CUP$YASPL2Cup$act_num,
    java_cup.runtime.lr_parser CUP$YASPL2Cup$parser,
    java.util.Stack            CUP$YASPL2Cup$stack,
    int                        CUP$YASPL2Cup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$YASPL2Cup$result;

      /* select the action based on the action number */
      switch (CUP$YASPL2Cup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programma ::= HEAD decls START statements 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("programma",0, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)).value;
		RESULT = start_val;
              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$YASPL2Cup$parser.done_parsing();
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decls ::= var_decl decls 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decls ::= def_decl decls 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decls ::= 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("decls",1, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= stat statements 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= stat 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("statements",2, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_decl ::= type vars SEMI 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("var_decl",3, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= INT 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= BOOL 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vars ::= NAME COMMA vars 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("vars",7, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vars ::= NAME 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("vars",7, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // types ::= type COMMA types 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("types",13, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // types ::= type 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("types",13, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // def_decl ::= DEF NAME LPAR var_decls RPAR COLON par_decls body 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("def_decl",4, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-7)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_decls ::= var_decl var_decls 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("var_decls",8, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_decls ::= 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("var_decls",8, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // par_decls ::= var_decl par_decls 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("par_decls",9, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // par_decls ::= var_decl 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("par_decls",9, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body ::= LGPAR var_decls statements RGPAR SEMI 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("body",10, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-4)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comp_stat ::= LGPAR statements RGPAR 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("comp_stat",11, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stat ::= comp_stat 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("stat",5, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stat ::= simple_stat 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("stat",5, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // simple_stat ::= vars READ types SEMI 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("simple_stat",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // simple_stat ::= out_values WRITE SEMI 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("simple_stat",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // simple_stat ::= NAME ASSIGN expr SEMI 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("simple_stat",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-3)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // simple_stat ::= NAME LPAR exprs COLON vars RPAR SEMI 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("simple_stat",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simple_stat ::= IF LPAR bool_expr RPAR THEN comp_stat ELSE comp_stat SEMI 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("simple_stat",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-8)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // simple_stat ::= IF LPAR bool_expr RPAR THEN comp_stat SEMI 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("simple_stat",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // simple_stat ::= WHILE LPAR bool_expr RPAR DO comp_stat SEMI 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("simple_stat",12, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-6)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // out_values ::= expr COMMA out_values 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("out_values",14, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // out_values ::= STRING_CONST COMMA out_values 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("out_values",14, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // out_values ::= expr 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("out_values",14, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // out_values ::= STRING_CONST 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("out_values",14, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exprs ::= expr COMMA exprs 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("exprs",16, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exprs ::= expr 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("exprs",16, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= NUMBER_INT 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= NUMBER_DOUBLE 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr arith_op expr 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= NAME 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= LPAR expr RPAR 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= MINUS expr 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arith_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("arith_op",17, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arith_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("arith_op",17, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arith_op ::= TIMES 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("arith_op",17, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arith_op ::= DIV 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("arith_op",17, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bool_expr ::= TRUE 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bool_expr ::= FALSE 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bool_expr ::= bool_expr bool_op bool_expr 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bool_expr ::= NOT bool_expr 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-1)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bool_expr ::= expr rel_op expr 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bool_expr ::= LPAR bool_expr RPAR 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_expr",15, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.elementAt(CUP$YASPL2Cup$top-2)), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bool_op ::= AND 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_op",18, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bool_op ::= OR 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("bool_op",18, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rel_op ::= GT 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("rel_op",19, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rel_op ::= GE 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("rel_op",19, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rel_op ::= LT 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("rel_op",19, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rel_op ::= LE 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("rel_op",19, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rel_op ::= EQ 
            {
              Object RESULT =null;

              CUP$YASPL2Cup$result = parser.getSymbolFactory().newSymbol("rel_op",19, ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), ((java_cup.runtime.Symbol)CUP$YASPL2Cup$stack.peek()), RESULT);
            }
          return CUP$YASPL2Cup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$YASPL2Cup$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$YASPL2Cup$do_action(
    int                        CUP$YASPL2Cup$act_num,
    java_cup.runtime.lr_parser CUP$YASPL2Cup$parser,
    java.util.Stack            CUP$YASPL2Cup$stack,
    int                        CUP$YASPL2Cup$top)
    throws java.lang.Exception
    {
              return CUP$YASPL2Cup$do_action_part00000000(
                               CUP$YASPL2Cup$act_num,
                               CUP$YASPL2Cup$parser,
                               CUP$YASPL2Cup$stack,
                               CUP$YASPL2Cup$top);
    }
}

}
